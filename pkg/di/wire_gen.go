// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/anrisys/quicket/internal/booking"
	"github.com/anrisys/quicket/internal/event"
	"github.com/anrisys/quicket/internal/infrastructure"
	"github.com/anrisys/quicket/internal/payment"
	"github.com/anrisys/quicket/pkg/config"
	"github.com/anrisys/quicket/pkg/config/logger"
	"github.com/anrisys/quicket/pkg/database"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	appConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	db, err := database.MySQLDB(appConfig)
	if err != nil {
		return nil, err
	}
	zerologLogger := logger.NewZerolog(appConfig)
	gormRepository := booking.NewGormRepository(db, zerologLogger)
	eventRepository := event.NewEventRepository(db, zerologLogger)
	userServiceClient := infrastructure.NewUserServiceClient(appConfig)
	eventService := event.NewEventService(eventRepository, userServiceClient, zerologLogger)
	paymentGormRepository := payment.NewRepository(db, zerologLogger)
	paymentService := payment.NewPaymentService(paymentGormRepository, zerologLogger)
	service := booking.NewService(gormRepository, eventService, zerologLogger, paymentService, userServiceClient)
	handler := booking.NewHandler(service, zerologLogger)
	eventHandler := event.NewEventHandler(eventService, zerologLogger)
	app := &App{
		Config:         appConfig,
		BookingHandler: handler,
		EventHandler:   eventHandler,
	}
	return app, nil
}

// wire.go:

type App struct {
	Config         *config.AppConfig
	BookingHandler *booking.Handler
	EventHandler   *event.EventHandler
}
