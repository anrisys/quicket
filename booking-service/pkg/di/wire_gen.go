// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"quicket/booking-service/internal/booking"
	"quicket/booking-service/internal/event_snapshot"
	"quicket/booking-service/internal/mq/consumer"
	"quicket/booking-service/internal/user_snapshot"
	"quicket/booking-service/pkg/config"
	"quicket/booking-service/pkg/database"
	"quicket/booking-service/pkg/mq/rabbitmq"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	db, err := database.ConnectMySQL(configConfig)
	if err != nil {
		return nil, err
	}
	logger := config.NewZerolog(configConfig)
	repo := booking.NewRepo(db, logger)
	evSnapshotRepo := eventsnapshot.NewEvSnapshotRepo(db, logger)
	srv := eventsnapshot.NewEvSnapshotSrv(evSnapshotRepo, logger)
	usersnapshotRepo := usersnapshot.NewRepo(db, logger)
	usersnapshotSrv := usersnapshot.NewSrv(usersnapshotRepo, logger)
	bookingSrv := booking.Newsrv(repo, srv, usersnapshotSrv, logger)
	handler := booking.NewHandler(bookingSrv)
	client, err := rabbitmq.NewClient(configConfig, logger)
	if err != nil {
		return nil, err
	}
	rabbitmqConsumer, err := rabbitmq.NewConsumer(client, logger)
	if err != nil {
		return nil, err
	}
	eventConsumer := consumer.NewEventConsumer(rabbitmqConsumer, logger, srv)
	app := &App{
		Config:        configConfig,
		Handler:       handler,
		EventConsumer: eventConsumer,
	}
	return app, nil
}
