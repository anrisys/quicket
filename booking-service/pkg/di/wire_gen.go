// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"quicket/booking-service/internal"
	"quicket/booking-service/internal/mq/consumer"
	"quicket/booking-service/pkg/config"
	"quicket/booking-service/pkg/database"
	"quicket/booking-service/pkg/mq/rabbitmq"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	db, err := database.ConnectMySQL(configConfig)
	if err != nil {
		return nil, err
	}
	logger := config.NewZerolog(configConfig)
	repo := internal.NewRepo(db, logger)
	evReader := internal.NewEvReader(db, logger)
	usrReader := internal.NewUsrReader(db, logger)
	srv := internal.Newsrv(repo, evReader, usrReader, logger)
	handler := internal.NewHandler(srv)
	client, err := rabbitmq.NewClient(configConfig, logger)
	if err != nil {
		return nil, err
	}
	rabbitmqConsumer, err := rabbitmq.NewConsumer(client, logger)
	if err != nil {
		return nil, err
	}
	evSnapshotRepo := internal.NewEvSnapshotRepo(db, logger)
	eventConsumer := consumer.NewEventConsumer(rabbitmqConsumer, logger, evSnapshotRepo)
	app := &App{
		Config:        configConfig,
		Handler:       handler,
		EventConsumer: eventConsumer,
	}
	return app, nil
}
